extend ../includes/section

block link
  -var selected = 'Layout';

block content
  h1.atk-push-reset Layout
  hr
  p.atk-size-mega.atk-text-light.atk-push-large
    | Agile CSS allows you to create a wide varietty of page layouts by combining
    | some of its&nbsp;
    span.atk-label.atk-swatch-lightRed atk-layout-*
    | &nbsp;classes as explained below.
  h2 Layout components explained
  p.
    #[span.atk-label.atk-swatch-lightRed= '<div class="atk-layout">'] is the
    first tag which must appear after
    #[span.atk-label.atk-swatch-lightRed &lt;body&gt;] inside
    your HTML when you are coding with Agile CSS. The immediate children
    of this class can only be
    #[span.atk-label.atk-swatch-lightRed= '<div class="atk-layout-row">'].
    Agile CSS layout system is using display:table that can offer great
    support for responsive layouts and a reliable way of laying out your
    layout sections.
  p.
    #[span.atk-label.atk-swatch-lightRed= '<div class="atk-layout-row">']
    can similarly only contain
    #[span.atk-label.atk-swatch-lightRed= '<div class="atk-layout-cell">'].
    #[span.atk-label.atk-swatch-lightRed= 'atk-layout-row'] defines a horizontal
    section of your page layout. Normally you would add at least 3 rows:
    header(menu), content and footer. For the content with a variable width,
    use additional class
    #[span.atk-label.atk-swatch-lightRed= 'atk-layout-expand']. Without this
    class all of your rows will expand proportionally to fill 100% of browser
    window height.

  h2 Basic layout
  p.
    Start with this example code below and create as many rows as you would
    require in your layout. Toolkit's layout element always covers 100% of
    available browser space. Decide which of the rows will expand to scale.
    Any rows you define after atk-layout-expander will stick to the bottom
    of your browser.
  pre.atk-push-large
    code.html.atk-box
      = '<div class="atk-layout">'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">Header</div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row atk-layout-expand">'
      br
      = '    <div class="atk-layout-cell">Content</div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">Sticky Footer</div>'
      br
      = '  </div>'
      br
      = '</div>'
  h2 Wrappers
  p.
    While the layout row will always take 100% width of your browser window,
    adding #[span.atk-label.atk-swatch-lightRed= '<div class="atk-wrapper">']
    inside of your content will automatically adjust width in a
    #[a(href='responsive') responsive] way to fit properly on the device
    screen. It's recommended to always use wrappers inside the cell like this:
  pre.atk-push-large
    code.html.atk-box
      = '<div class="atk-layout">'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">'
      br
      = '      <div class="atk-wrapper">Header</div>'
      br
      = '    </div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row atk-layout-expand">'
      br
      = '    <div class="atk-layout-cell">'
      br
      = '      <div class="atk-wrapper">Content</div>'
      br
      = '    </div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">'
      br
      = '      <div class="atk-wrapper">Footer</div>'
      br
      = '    </div>'
      br
      = '  </div>'
      br
      = '</div>'
  h2 Columns and Sidebars
  p.
    It is possible to break your #[span.atk-label.atk-swatch-lightRed= 'atk-layout-cell']
    into multiple columns by adding #[span.atk-label.atk-swatch-lightRed= 'atk-layout']
    class on that div and inserting multiple divs with
    #[span.atk-label.atk-swatch-lightRed= 'atk-layout-column'] as direct children
    like the next example demonstrates. Again, use of
    #[span.atk-label.atk-swatch-lightRed= 'atk-layout-expand'] defines which column
    will expand but this time horizontally:
  pre.atk-push-large
    code.html.atk-box
      = '<div class="atk-layout">'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">'
      br
      = '      <div class="atk-wrapper">Header</div>'
      br
      = '    </div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row atk-layout-expand">'
      br
      = '    <div class="atk-layout-cell atk-layout">'
      br
      = '      <div class="atk-layout-column">Left Sidebar</div>'
      br
      = '      <div class="atk-layout-column atk-layout-expand">'
      br
      = '        <div class="atk-wrapper">Content</div>'
      br
      = '      </div>'
      br
      = '      <div class="atk-layout-column">Right Sidebar</div>'
      br
      = '    </div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">'
      br
      = '      <div class="atk-wrapper">Footer</div>'
      br
      = '    </div>'
      br
      = '  </div>'
      br
      = '</div>'
  h2 Vertical alignment of content
  p.
    Layout system in Agile CSS allows you to easily align column content vertically
    and display it in the middle of the screen by using one of
    #[span.atk-label.atk-swatch-lightRed= 'atk-align-top'],
    #[span.atk-label.atk-swatch-lightRed= 'atk-align-middle'] and
    #[span.atk-label.atk-swatch-lightRed= 'atk-align-bottom'] classes.
    This is a perfect approach to center your log-in box.
  pre
    code.html.atk-box
      = '<div class="atk-layout">'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">Header</div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row atk-layout-expand">'
      br
      = '    <div class="atk-layout-cell atk-layout">'
      br
      = '      <div class="atk-layout-column atk-layout-expand atk-valign-middle">'
      br
      = '        Centered Content'
      br
      = '      </div>'
      br
      = '    </div>'
      br
      = '  </div>'
      br
      = '  <div class="atk-layout-row">'
      br
      = '    <div class="atk-layout-cell">Footer</div>'
      br
      = '  </div>'
      br
      = '</div>'


  h2 Nesting Layouts
  p.
    Once you have defined your layout, if your UI requirements consist of
    multiple nested rows and columns, you can include
    #[span.atk-label.atk-swatch-lightRed= 'atk-layout'] yet again with a new
    set of rows, however be sure to repeat the whole layout correctly.

  // TODO: Mayack - please double-check that this works
